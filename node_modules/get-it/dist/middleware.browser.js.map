{"version":3,"file":"middleware.browser.js","sources":["../src/middleware/base.ts","../src/middleware/debug.ts","../src/middleware/headers.ts","../src/middleware/httpErrors.ts","../src/middleware/injectResponse.ts","../src/util/isBuffer.ts","../src/middleware/jsonRequest.ts","../src/middleware/jsonResponse.ts","../src/middleware/keepAlive/browser-keepAlive.ts","../src/util/isBrowserOptions.ts","../src/middleware/mtls.ts","../src/util/global.ts","../src/middleware/observable.ts","../src/middleware/progress/browser-progress.ts","../src/middleware/promise.ts","../src/middleware/proxy.ts","../src/util/browser-shouldRetry.ts","../src/middleware/retry/shared-retry.ts","../src/middleware/retry/browser-retry.ts","../src/middleware/urlEncoded.ts"],"sourcesContent":["import type {Middleware} from '../types'\n\nconst leadingSlash = /^\\//\nconst trailingSlash = /\\/$/\n\n/** @public */\nexport function base(baseUrl: string) {\n  const baseUri = baseUrl.replace(trailingSlash, '')\n  return {\n    processOptions: (options) => {\n      if (/^https?:\\/\\//i.test(options.url)) {\n        return options // Already prefixed\n      }\n\n      const url = [baseUri, options.url.replace(leadingSlash, '')].join('/')\n      return Object.assign({}, options, {url})\n    },\n  } satisfies Middleware\n}\n","import debugIt from 'debug'\n\nimport type {Middleware} from '../types'\n\nconst SENSITIVE_HEADERS = ['cookie', 'authorization']\n\nconst hasOwn = Object.prototype.hasOwnProperty\nconst redactKeys = (source: any, redacted: any) => {\n  const target: any = {}\n  for (const key in source) {\n    if (hasOwn.call(source, key)) {\n      target[key] = redacted.indexOf(key.toLowerCase()) > -1 ? '<redacted>' : source[key]\n    }\n  }\n  return target\n}\n\n/** @public */\nexport function debug(opts: any = {}) {\n  const verbose = opts.verbose\n  const namespace = opts.namespace || 'get-it'\n  const defaultLogger = debugIt(namespace)\n  const log = opts.log || defaultLogger\n  const shortCircuit = log === defaultLogger && !debugIt.enabled(namespace)\n  let requestId = 0\n\n  return {\n    processOptions: (options) => {\n      options.debug = log\n      options.requestId = options.requestId || ++requestId\n      return options\n    },\n\n    onRequest: (event) => {\n      // Short-circuit if not enabled, to save some CPU cycles with formatting stuff\n      if (shortCircuit || !event) {\n        return event\n      }\n\n      const options = event.options\n\n      log('[%s] HTTP %s %s', options.requestId, options.method, options.url)\n\n      if (verbose && options.body && typeof options.body === 'string') {\n        log('[%s] Request body: %s', options.requestId, options.body)\n      }\n\n      if (verbose && options.headers) {\n        const headers =\n          opts.redactSensitiveHeaders === false\n            ? options.headers\n            : redactKeys(options.headers, SENSITIVE_HEADERS)\n\n        log('[%s] Request headers: %s', options.requestId, JSON.stringify(headers, null, 2))\n      }\n\n      return event\n    },\n\n    onResponse: (res, context) => {\n      // Short-circuit if not enabled, to save some CPU cycles with formatting stuff\n      if (shortCircuit || !res) {\n        return res\n      }\n\n      const reqId = context.options.requestId\n\n      log('[%s] Response code: %s %s', reqId, res.statusCode, res.statusMessage)\n\n      if (verbose && res.body) {\n        log('[%s] Response body: %s', reqId, stringifyBody(res))\n      }\n\n      return res\n    },\n\n    onError: (err, context) => {\n      const reqId = context.options.requestId\n      if (!err) {\n        log('[%s] Error encountered, but handled by an earlier middleware', reqId)\n        return err\n      }\n\n      log('[%s] ERROR: %s', reqId, err.message)\n      return err\n    },\n  } satisfies Middleware\n}\n\nfunction stringifyBody(res: any) {\n  const contentType = (res.headers['content-type'] || '').toLowerCase()\n  const isJson = contentType.indexOf('application/json') !== -1\n  return isJson ? tryFormat(res.body) : res.body\n}\n\n// Attempt pretty-formatting JSON\nfunction tryFormat(body: any) {\n  try {\n    const parsed = typeof body === 'string' ? JSON.parse(body) : body\n    return JSON.stringify(parsed, null, 2)\n  } catch (err) {\n    return body\n  }\n}\n","import type {Middleware} from '../types'\n\n/** @public */\nexport function headers(_headers: any, opts: any = {}) {\n  return {\n    processOptions: (options) => {\n      const existing = options.headers || {}\n      options.headers = opts.override\n        ? Object.assign({}, existing, _headers)\n        : Object.assign({}, _headers, existing)\n\n      return options\n    },\n  } satisfies Middleware\n}\n","import type {Middleware} from '../types'\n\nclass HttpError extends Error {\n  response: any\n  request: any\n  constructor(res: any, ctx: any) {\n    super()\n    const truncatedUrl = res.url.length > 400 ? `${res.url.slice(0, 399)}â€¦` : res.url\n    let msg = `${res.method}-request to ${truncatedUrl} resulted in `\n    msg += `HTTP ${res.statusCode} ${res.statusMessage}`\n\n    this.message = msg.trim()\n    this.response = res\n    this.request = ctx.options\n  }\n}\n\n/** @public */\nexport function httpErrors() {\n  return {\n    onResponse: (res, ctx) => {\n      const isHttpError = res.statusCode >= 400\n      if (!isHttpError) {\n        return res\n      }\n\n      throw new HttpError(res, ctx)\n    },\n  } satisfies Middleware\n}\n","import type {Middleware, MiddlewareHooks, MiddlewareResponse} from '../types'\n\n/** @public */\nexport function injectResponse(\n  opts: {\n    inject: (\n      event: Parameters<MiddlewareHooks['interceptRequest']>[1],\n      prevValue: Parameters<MiddlewareHooks['interceptRequest']>[0]\n    ) => Partial<MiddlewareResponse | undefined | void>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } = {} as any\n) {\n  if (typeof opts.inject !== 'function') {\n    throw new Error('`injectResponse` middleware requires a `inject` function')\n  }\n\n  const inject = function inject(prevValue, event) {\n    const response = opts.inject(event, prevValue)\n    if (!response) {\n      return prevValue\n    }\n\n    // Merge defaults so we don't have to provide the most basic of details unless we want to\n    const options = event.context.options\n    return {\n      body: '',\n      url: options.url,\n      method: options.method!,\n      headers: {},\n      statusCode: 200,\n      statusMessage: 'OK',\n      ...response,\n    } satisfies MiddlewareResponse\n  } satisfies Middleware['interceptRequest']\n\n  return {interceptRequest: inject} satisfies Middleware\n}\n","export const isBuffer =\n  typeof Buffer === 'undefined' ? () => false : (obj: unknown) => Buffer.isBuffer(obj)\n","import {isPlainObject} from 'is-plain-object'\n\nimport type {Middleware} from '../types'\nimport {isBuffer} from '../util/isBuffer'\n\nconst serializeTypes = ['boolean', 'string', 'number']\n\n/** @public */\nexport function jsonRequest() {\n  return {\n    processOptions: (options) => {\n      const body = options.body\n      if (!body) {\n        return options\n      }\n\n      const isStream = typeof body.pipe === 'function'\n      const shouldSerialize =\n        !isStream &&\n        !isBuffer(body) &&\n        (serializeTypes.indexOf(typeof body) !== -1 || Array.isArray(body) || isPlainObject(body))\n\n      if (!shouldSerialize) {\n        return options\n      }\n\n      return Object.assign({}, options, {\n        body: JSON.stringify(options.body),\n        headers: Object.assign({}, options.headers, {\n          'Content-Type': 'application/json',\n        }),\n      })\n    },\n  } satisfies Middleware\n}\n","import type {Middleware} from '../types'\n\n/** @public */\nexport function jsonResponse(opts?: any) {\n  return {\n    onResponse: (response) => {\n      const contentType = response.headers['content-type'] || ''\n      const shouldDecode = (opts && opts.force) || contentType.indexOf('application/json') !== -1\n      if (!response.body || !contentType || !shouldDecode) {\n        return response\n      }\n\n      return Object.assign({}, response, {body: tryParse(response.body)})\n    },\n\n    processOptions: (options) =>\n      Object.assign({}, options, {\n        headers: Object.assign({Accept: 'application/json'}, options.headers),\n      }),\n  } satisfies Middleware\n\n  function tryParse(body: any) {\n    try {\n      return JSON.parse(body)\n    } catch (err: any) {\n      err.message = `Failed to parsed response body as JSON: ${err.message}`\n      throw err\n    }\n  }\n}\n","// not applicable in the browser so we just return a noop function\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function keepAlive(): void {}\n","import type {RequestOptions} from '../types'\n\nexport function isBrowserOptions(options: unknown): options is RequestOptions {\n  return typeof options === 'object' && options !== null && !('protocol' in options)\n}\n","import type {Middleware} from '../types'\nimport {isBrowserOptions} from '../util/isBrowserOptions'\n\n/** @public */\nexport function mtls(config: any = {}) {\n  if (!config.ca) {\n    throw new Error('Required mtls option \"ca\" is missing')\n  }\n  if (!config.cert) {\n    throw new Error('Required mtls option \"cert\" is missing')\n  }\n  if (!config.key) {\n    throw new Error('Required mtls option \"key\" is missing')\n  }\n\n  return {\n    finalizeOptions: (options) => {\n      if (isBrowserOptions(options)) {\n        return options\n      }\n\n      const mtlsOpts = {\n        cert: config.cert,\n        key: config.key,\n        ca: config.ca,\n      }\n      return Object.assign({}, options, mtlsOpts)\n    },\n  } satisfies Middleware\n}\n","let actualGlobal = {} as typeof globalThis\n\nif (typeof globalThis !== 'undefined') {\n  actualGlobal = globalThis\n} else if (typeof window !== 'undefined') {\n  actualGlobal = window\n} else if (typeof global !== 'undefined') {\n  actualGlobal = global\n} else if (typeof self !== 'undefined') {\n  actualGlobal = self\n}\n\nexport default actualGlobal\n","import type {Middleware} from '../types'\nimport global from '../util/global'\n\n/** @public */\nexport function observable(\n  opts: {\n    implementation?: any\n  } = {}\n) {\n  const Observable =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- @TODO consider dropping checking for a global Observable since it's not on a standards track\n    opts.implementation || (global as any).Observable\n  if (!Observable) {\n    throw new Error(\n      '`Observable` is not available in global scope, and no implementation was passed'\n    )\n  }\n\n  return {\n    onReturn: (channels, context) =>\n      new Observable((observer: any) => {\n        channels.error.subscribe((err) => observer.error(err))\n        channels.progress.subscribe((event) =>\n          observer.next(Object.assign({type: 'progress'}, event))\n        )\n        channels.response.subscribe((response) => {\n          observer.next(Object.assign({type: 'response'}, response))\n          observer.complete()\n        })\n\n        channels.request.publish(context)\n        return () => channels.abort.publish()\n      }),\n  } satisfies Middleware\n}\n","import type {Middleware} from '../../types'\n\nexport function progress() {\n  return {\n    onRequest: (evt) => {\n      if (evt.adapter !== 'xhr') {\n        return\n      }\n\n      const xhr = evt.request\n      const context = evt.context\n\n      if ('upload' in xhr && 'onprogress' in xhr.upload) {\n        xhr.upload.onprogress = handleProgress('upload')\n      }\n\n      if ('onprogress' in xhr) {\n        xhr.onprogress = handleProgress('download')\n      }\n\n      function handleProgress(stage: 'download' | 'upload') {\n        return (event: any) => {\n          const percent = event.lengthComputable ? (event.loaded / event.total) * 100 : -1\n          context.channels.progress.publish({\n            stage,\n            percent,\n            total: event.total,\n            loaded: event.loaded,\n            lengthComputable: event.lengthComputable,\n          })\n        }\n      }\n    },\n  } satisfies Middleware\n}\n","import type {Middleware} from '../types'\n\n/** @public */\nexport const promise = (\n  options: {onlyBody?: boolean; implementation?: PromiseConstructor} = {}\n) => {\n  const PromiseImplementation = options.implementation || Promise\n  if (!PromiseImplementation) {\n    throw new Error('`Promise` is not available in global scope, and no implementation was passed')\n  }\n\n  return {\n    onReturn: (channels, context) =>\n      new PromiseImplementation((resolve, reject) => {\n        const cancel = context.options.cancelToken\n        if (cancel) {\n          cancel.promise.then((reason: any) => {\n            channels.abort.publish(reason)\n            reject(reason)\n          })\n        }\n\n        channels.error.subscribe(reject)\n        channels.response.subscribe((response) => {\n          resolve(options.onlyBody ? (response as any).body : response)\n        })\n\n        // Wait until next tick in case cancel has been performed\n        setTimeout(() => {\n          try {\n            channels.request.publish(context)\n          } catch (err) {\n            reject(err)\n          }\n        }, 0)\n      }),\n  } satisfies Middleware\n}\n\n/**\n * The cancel token API is based on the [cancelable promises proposal](https://github.com/tc39/proposal-cancelable-promises), which is currently at Stage 1.\n *\n * Code shamelessly stolen/borrowed from MIT-licensed [axios](https://github.com/mzabriskie/axios). Thanks to [Nick Uraltsev](https://github.com/nickuraltsev), [Matt Zabriskie](https://github.com/mzabriskie) and the other contributors of that project!\n */\n/** @public */\nexport class Cancel {\n  __CANCEL__ = true\n\n  message: string | undefined\n\n  constructor(message: string | undefined) {\n    this.message = message\n  }\n\n  toString() {\n    return `Cancel${this.message ? `: ${this.message}` : ''}`\n  }\n}\n\n/** @public */\nexport class CancelToken {\n  promise: Promise<any>\n  reason?: Cancel\n\n  constructor(executor: (cb: (message?: string) => void) => void) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.')\n    }\n\n    let resolvePromise: any = null\n\n    this.promise = new Promise((resolve) => {\n      resolvePromise = resolve\n    })\n\n    executor((message?: string) => {\n      if (this.reason) {\n        // Cancellation has already been requested\n        return\n      }\n\n      this.reason = new Cancel(message)\n      resolvePromise(this.reason)\n    })\n  }\n\n  static source = () => {\n    let cancel: (message?: string) => void\n    const token = new CancelToken((can) => {\n      cancel = can\n    })\n\n    return {\n      token: token,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- we know from the implementation that it's assigned during `constructor`\n      cancel: cancel!,\n    }\n  }\n}\n\nconst isCancel = (value: any): value is Cancel => !!(value && value?.__CANCEL__)\n\npromise.Cancel = Cancel\npromise.CancelToken = CancelToken\npromise.isCancel = isCancel\n","import type {Middleware} from '../types'\n\n/** @public */\nexport function proxy(_proxy: any) {\n  if (_proxy !== false && (!_proxy || !_proxy.host)) {\n    throw new Error('Proxy middleware takes an object of host, port and auth properties')\n  }\n\n  return {\n    processOptions: (options) => Object.assign({proxy: _proxy}, options),\n  } satisfies Middleware\n}\n","export default (err: any, attempt: any, options: any) => {\n  if (options.method !== 'GET' && options.method !== 'HEAD') {\n    return false\n  }\n\n  return err.isNetworkError || false\n}\n","import type {Middleware, RetryOptions} from '../../types'\n\nconst isStream = (stream: any) =>\n  stream !== null && typeof stream === 'object' && typeof stream.pipe === 'function'\n\n/** @public */\nexport default (opts: RetryOptions) => {\n  const maxRetries = opts.maxRetries || 5\n  const retryDelay = opts.retryDelay || getRetryDelay\n  const allowRetry = opts.shouldRetry\n\n  return {\n    onError: (err, context) => {\n      const options = context.options\n      const max = options.maxRetries || maxRetries\n      const shouldRetry = options.shouldRetry || allowRetry\n      const attemptNumber = options.attemptNumber || 0\n\n      // We can't retry if body is a stream, since it'll be drained\n      if (isStream(options.body)) {\n        return err\n      }\n\n      // Give up?\n      if (!shouldRetry(err, attemptNumber, options) || attemptNumber >= max) {\n        return err\n      }\n\n      // Create a new context with an increased attempt number, so we can exit if we reach a limit\n      const newContext = Object.assign({}, context, {\n        options: Object.assign({}, options, {attemptNumber: attemptNumber + 1}),\n      })\n\n      // Wait a given amount of time before doing the request again\n      setTimeout(() => context.channels.request.publish(newContext), retryDelay(attemptNumber))\n\n      // Signal that we've handled the error and that it should not propagate further\n      return null\n    },\n  } satisfies Middleware\n}\n\nfunction getRetryDelay(attemptNum: number) {\n  return 100 * Math.pow(2, attemptNum) + Math.random() * 100\n}\n","import type {RetryOptions} from '../../types'\nimport defaultShouldRetry from '../../util/browser-shouldRetry'\nimport sharedRetry from './shared-retry'\n\n/** @public */\nexport const retry = (opts: Partial<RetryOptions> = {}) =>\n  sharedRetry({shouldRetry: defaultShouldRetry, ...opts})\n\nretry.shouldRetry = defaultShouldRetry\n","import {isPlainObject} from 'is-plain-object'\n\nimport type {Middleware} from '../types'\nimport {isBuffer} from '../util/isBuffer'\n\nfunction encode(data: Record<string, string | Set<number | string>>): string {\n  const query = new URLSearchParams()\n\n  const nest = (name: string, _value: unknown) => {\n    const value = _value instanceof Set ? Array.from(_value) : _value\n    if (Array.isArray(value)) {\n      if (value.length) {\n        for (const index in value) {\n          nest(`${name}[${index}]`, value[index])\n        }\n      } else {\n        query.append(`${name}[]`, '')\n      }\n    } else if (typeof value === 'object' && value !== null) {\n      for (const [key, obj] of Object.entries(value)) {\n        nest(`${name}[${key}]`, obj)\n      }\n    } else {\n      query.append(name, value as string)\n    }\n  }\n\n  for (const [key, value] of Object.entries(data)) {\n    nest(key, value)\n  }\n\n  return query.toString()\n}\n\n/** @public */\nexport function urlEncoded() {\n  return {\n    processOptions: (options) => {\n      const body = options.body\n      if (!body) {\n        return options\n      }\n\n      const isStream = typeof body.pipe === 'function'\n      const shouldSerialize = !isStream && !isBuffer(body) && isPlainObject(body)\n\n      if (!shouldSerialize) {\n        return options\n      }\n\n      return {\n        ...options,\n        body: encode(options.body),\n        headers: {\n          ...options.headers,\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      }\n    },\n  } satisfies Middleware\n}\n"],"names":["leadingSlash","trailingSlash","base","baseUrl","baseUri","replace","processOptions","options","test","url","join","Object","assign","SENSITIVE_HEADERS","hasOwn","prototype","hasOwnProperty","redactKeys","source","redacted","target","key","call","indexOf","toLowerCase","debug","opts","arguments","length","undefined","verbose","namespace","defaultLogger","debugIt","log","shortCircuit","enabled","requestId","onRequest","event","method","body","headers","redactSensitiveHeaders","JSON","stringify","onResponse","res","context","reqId","statusCode","statusMessage","stringifyBody","onError","err","message","contentType","isJson","tryFormat","parsed","parse","_headers","existing","override","HttpError","Error","constructor","ctx","truncatedUrl","concat","slice","msg","trim","response","request","httpErrors","isHttpError","injectResponse","inject","inject2","prevValue","interceptRequest","isBuffer","Buffer","obj","serializeTypes","jsonRequest","isStream","pipe","shouldSerialize","Array","isArray","isPlainObject","jsonResponse","shouldDecode","force","tryParse","Accept","keepAlive","isBrowserOptions","mtls","config","ca","cert","finalizeOptions","mtlsOpts","actualGlobal","globalThis","window","global","self","global$1","observable","Observable","implementation","onReturn","channels","observer","error","subscribe","progress","next","type","complete","publish","abort","evt","adapter","xhr","upload","onprogress","handleProgress","stage","percent","lengthComputable","loaded","total","promise","PromiseImplementation","Promise","resolve","reject","cancel","cancelToken","then","reason","onlyBody","setTimeout","Cancel","__CANCEL__","toString","_CancelToken","executor","TypeError","resolvePromise","CancelToken","token","can","isCancel","value","proxy","_proxy","host","defaultShouldRetry","attempt","isNetworkError","stream","sharedRetry","maxRetries","retryDelay","getRetryDelay","allowRetry","shouldRetry","max","attemptNumber","newContext","attemptNum","Math","pow","random","retry","encode","data","query","URLSearchParams","nest","name","_value","Set","from","index","append","entries","urlEncoded"],"mappings":"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"}
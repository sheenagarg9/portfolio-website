{"version":3,"file":"index.js","sources":["../src/hooks.ts","../src/LiveQueryProvider.tsx"],"sourcesContent":["import type { QueryParams as ClientQueryParams } from '@sanity/client'\nimport { useCallback, useContext, useMemo, useState } from 'react'\nimport isFastEqual from 'react-fast-compare'\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/with-selector'\n\nimport { defineListenerContext, LoadedListenersContext } from './context'\nimport type { ListenerStatus } from './types'\nimport { getQueryCacheKey } from './utils'\n\n// Re-export types we use that are needed externally\nexport type { ClientQueryParams, ListenerStatus }\n\n/**\n * By default 'react-fast-compare' is used to check if the query result has changed.\n * It's reasonably fast, but you can make it even faster by providing your own function as you know which\n * part of the query result is visible to the user, and which parts can skip rendering.\n * @public\n */\nexport type isEqualFn<QueryResult> = (a: QueryResult, b: QueryResult) => boolean\n\n/** @public */\nexport interface LiveQueryHookOptions<QueryResult> {\n  isEqual?: isEqualFn<QueryResult>\n}\n\n/** @public */\nexport type QueryLoading = boolean\n\n/** @public */\nexport function useLiveQuery<\n  QueryResult,\n  QueryParams extends ClientQueryParams = ClientQueryParams\n>(\n  initialData: QueryResult,\n  query: string,\n  queryParams?: QueryParams,\n  options?: LiveQueryHookOptions<QueryResult>\n): [QueryResult, QueryLoading] {\n  const { isEqual = isFastEqual } = options || {}\n\n  const defineStore = useContext(defineListenerContext)\n  const params = useParams(queryParams)\n  const store = useMemo(\n    () => defineStore<QueryResult>(initialData, query, params),\n    [defineStore, initialData, params, query]\n  )\n  // initialSnapshot might change before hydration is done, so deep cloning it on the first hook call\n  // helps ensure that we don't get a mismatch between the server and client snapshots\n  const [serverSnapshot] = useState(() => {\n    if (initialData === undefined) {\n      throw new Error(\n        `initialSnapshot can't be undefined, if you don't want an initial value use null instead`\n      )\n    }\n    try {\n      return JSON.parse(JSON.stringify(initialData))\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        \"Failed to deep clone initialSnapshot, this is likely an error and an indication that the snapshot isn't JSON serializable\",\n        { initialSnapshot: initialData, error }\n      )\n      return initialData\n    }\n  })\n  const getServerSnapshot = useCallback(() => serverSnapshot, [serverSnapshot])\n  const selector = useCallback((snapshot: QueryResult) => snapshot, [])\n\n  const snapshot = useSyncExternalStoreWithSelector(\n    store.subscribe,\n    store.getSnapshot,\n    getServerSnapshot,\n    selector,\n    isEqual\n  )\n  const loading = useLiveQueryIsLoading(query, params)\n\n  return [snapshot, loading]\n}\n\n/**\n * Wether a particular query is loading or not.\n * @public\n */\nfunction useLiveQueryIsLoading(\n  query: string,\n  params: ClientQueryParams\n): QueryLoading {\n  const loadedListeners = useContext(LoadedListenersContext)\n  const key = useMemo(() => getQueryCacheKey(query, params), [params, query])\n\n  return useMemo(() => {\n    if (Array.isArray(loadedListeners)) {\n      return loadedListeners.includes(key) ? false : true\n    }\n    return false\n  }, [key, loadedListeners])\n}\n\n/**\n * @public\n * @deprecated use `LiveQueryHookOptions` instead\n */\nexport interface ListeningQueryHookOptions<QueryResult> {\n  isEqual?: isEqualFn<QueryResult>\n}\n\n/**\n * @public\n * @deprecated use `useLiveQuery` instead\n */\nexport function useListeningQuery<\n  QueryResult,\n  QueryParams extends ClientQueryParams = ClientQueryParams\n>(\n  initialSnapshot: QueryResult,\n  query: string,\n  queryParams?: QueryParams,\n  options?: ListeningQueryHookOptions<QueryResult>\n): QueryResult {\n  const [snapshot] = useLiveQuery<QueryResult, QueryParams>(\n    initialSnapshot,\n    query,\n    queryParams,\n    options\n  )\n  return snapshot\n}\n\n/**\n * Wether a particular query is loading or not.\n * @public\n * @deprecated use `useLiveQuery` instead\n */\nexport function useListeningQueryStatus<\n  QueryParams extends ClientQueryParams = ClientQueryParams\n>(query: string, queryParams?: QueryParams): ListenerStatus {\n  const params = useParams(queryParams)\n  const loading = useLiveQueryIsLoading(query, params)\n\n  return loading ? 'loading' : 'success'\n}\n\n/**\n * Return params that are stable with deep equal as long as the key order is the same\n * @internal\n */\nfunction useParams(\n  params?: undefined | null | ClientQueryParams\n): ClientQueryParams {\n  const stringifiedParams = useMemo(\n    () => JSON.stringify(params || {}),\n    [params]\n  )\n  return useMemo(() => JSON.parse(stringifiedParams), [stringifiedParams])\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport type { SanityClient } from '@sanity/client'\nimport { lazy, memo, Suspense, useEffect, useMemo, useState } from 'react'\n\nimport type { Logger } from './types'\nimport { DEFAULT_MAX_DOCUMENTS, DEFAULT_TAG } from './utils'\n\nconst LazyGroqStoreProvider = lazy(() => import('./groq-store'))\nconst LiveStoreProvider = lazy(() => import('./live-store'))\n\nexport type { Logger }\n\n/** @public */\nexport interface CacheOptions {\n  /**\n   * Uses a `Listen` API call with EventSource to stream updates in real-time to the documents cache\n   * @defaultValue true\n   */\n  listen?: boolean\n  /**\n   * The maximum number of documents to keep in the in-memory\n   * @defaultValue 3000\n   */\n  maxDocuments?: number\n  /**\n   * Set it to an array over document `_type` names to filter the cache to, set it to an empty array to cache any type\n   * @defaultValue []\n   */\n  includeTypes?: string[]\n}\n\n/** @public */\nexport interface LiveQueryProviderProps {\n  children: React.ReactNode\n  client: SanityClient\n  cache?: CacheOptions\n  /**\n   * Uses a `Listen` API call with EventSource to stream updates in real-time to the documents cache, powered by `Content Source Map` metadata\n   * @defaultValue true\n   */\n  turboSourceMap?: boolean\n  /**\n   * The interval in millieseconds to refetch in the background, when the tab is active.\n   * It's only used if `turboSourceMap` is set to `true` or there are too many documents to fit in the local cache.\n   * Set it to `0` to disable background refresh.\n   * @defaultValue 10000\n   */\n  refreshInterval?: number\n  logger?: Logger\n}\n\nexport const LiveQueryProvider = memo(function LiveQueryProvider(\n  props: LiveQueryProviderProps\n) {\n  const { children, refreshInterval = 10000 } = props\n\n  if (!props.client) {\n    throw new Error(\n      'Missing a `client` prop with a configured Sanity client instance'\n    )\n  }\n\n  // Ensure these values are stable even if userland isn't memoizing properly\n  const [client] = useState(() =>\n    props.client.withConfig({\n      requestTagPrefix: props.client.config().requestTagPrefix || DEFAULT_TAG,\n    })\n  )\n  const [cache] = useState(() => props.cache)\n  const [logger] = useState(() => props.logger)\n  const turboSourceMap = useMemo(\n    () => props.turboSourceMap ?? client.config().resultSourceMap,\n    [client, props.turboSourceMap]\n  )\n\n  if (turboSourceMap) {\n    return (\n      <Suspense fallback={children}>\n        <LiveStoreProvider\n          client={client}\n          logger={logger}\n          refreshInterval={refreshInterval}\n          turboSourceMap={turboSourceMap}\n        >\n          {children}\n        </LiveStoreProvider>\n      </Suspense>\n    )\n  }\n\n  return (\n    <SelectStoreProvider\n      client={client}\n      cache={cache}\n      logger={logger}\n      refreshInterval={refreshInterval}\n    >\n      {children}\n    </SelectStoreProvider>\n  )\n})\n\nconst SelectStoreProvider = memo(function SelectStoreProvider(\n  props: LiveQueryProviderProps\n) {\n  const { children, refreshInterval, client, cache, logger } = props\n  const maxDocuments = cache?.maxDocuments ?? DEFAULT_MAX_DOCUMENTS\n  const [documentsCount, setDocumentsCount] = useState<number | null>(null)\n  const [error, setError] = useState<Error | null>(null)\n  const [includeTypes] = useState(() => cache?.includeTypes ?? [])\n\n  // Rethrow errors to the nearest error boundary\n  if (error) {\n    throw error\n  }\n\n  useEffect(() => {\n    if (documentsCount !== null) {\n      return\n    }\n\n    logger?.log('[@sanity/preview-kit]: fetch documents count')\n    const controller = new AbortController()\n    client\n      .fetch<number>(\n        includeTypes.length > 0\n          ? 'count(*[_type in $includeTypes])'\n          : 'count(*)',\n        { includeTypes },\n        { filterResponse: true, signal: controller.signal }\n      )\n      .then((result) => {\n        logger?.log('[@sanity/preview-kit]: documents count', result)\n        setDocumentsCount(result)\n      })\n      .catch((error) => {\n        if (error.name !== 'AbortError') {\n          setError(error)\n        }\n      })\n    return () => {\n      controller.abort()\n    }\n  }, [client, documentsCount, includeTypes, logger])\n\n  if (documentsCount === null) {\n    return children\n  }\n\n  if (refreshInterval && documentsCount >= maxDocuments) {\n    return (\n      <Suspense fallback={children}>\n        <LiveStoreProvider\n          client={client}\n          refreshInterval={refreshInterval}\n          turboSourceMap={false}\n          logger={logger}\n        >\n          {children}\n        </LiveStoreProvider>\n      </Suspense>\n    )\n  }\n\n  if (documentsCount >= maxDocuments) {\n    throw new Error(\n      `[@sanity/preview-kit]: You have ${documentsCount} documents in your dataset, which is more than the maximum of ${maxDocuments} documents. Please reduce the number of documents in your dataset or increase the limit.`\n    )\n  }\n\n  return (\n    <Suspense fallback={children}>\n      <GroqStoreProvider {...props}>{children}</GroqStoreProvider>\n    </Suspense>\n  )\n})\n\nconst GroqStoreProvider = memo(function GroqStoreProvider(\n  props: LiveQueryProviderProps\n) {\n  const { children, client, cache, logger } = props\n  const {\n    projectId,\n    dataset,\n    token,\n    perspective = 'previewDrafts',\n    requestTagPrefix,\n  } = useMemo(() => client.config(), [client])\n\n  return (\n    <LazyGroqStoreProvider\n      projectId={projectId!}\n      dataset={dataset!}\n      token={token}\n      logger={logger}\n      listen={cache?.listen ?? true}\n      documentLimit={cache?.maxDocuments}\n      overlayDrafts={perspective === 'previewDrafts'}\n      includeTypes={cache?.includeTypes}\n      requestTagPrefix={requestTagPrefix}\n    >\n      {children}\n    </LazyGroqStoreProvider>\n  )\n})\n"],"names":["useLiveQuery","initialData","query","queryParams","options","isEqual","isFastEqual","defineStore","useContext","defineListenerContext","params","useParams","store","useMemo","serverSnapshot","useState","Error","JSON","parse","stringify","error","console","warn","initialSnapshot","getServerSnapshot","useCallback","selector","snapshot","useSyncExternalStoreWithSelector","subscribe","getSnapshot","loading","useLiveQueryIsLoading","loadedListeners","LoadedListenersContext","key","getQueryCacheKey","Array","isArray","includes","useListeningQuery","useListeningQueryStatus","stringifiedParams","LazyGroqStoreProvider","lazy","LiveStoreProvider","LiveQueryProvider","memo","props","children","refreshInterval","client","withConfig","requestTagPrefix","config","DEFAULT_TAG","cache","logger","turboSourceMap","_a","resultSourceMap","jsx","Suspense","fallback","SelectStoreProvider","maxDocuments","DEFAULT_MAX_DOCUMENTS","documentsCount","setDocumentsCount","setError","includeTypes","useEffect","log","controller","AbortController","fetch","length","filterResponse","signal","then","result","catch","name","abort","concat","GroqStoreProvider","projectId","dataset","token","perspective","listen","documentLimit","overlayDrafts"],"mappings":"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"}